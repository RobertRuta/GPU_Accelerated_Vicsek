// Each #kernel tells which function to compile; you can have many kernels

#pragma kernel ParticleUpdate
#pragma kernel OptimizedParticleUpdate
#pragma kernel RearrangeParticleIDs
#pragma kernel BuildStartEndIDs

#include "simulation_variables.cginc"
#include "noise_utility.cginc"
#include "grid_utility.cginc"


struct Particle
{
    float4 position;
    float4 velocity;
};

struct Cell
{
    int is_full;
};


RWStructuredBuffer<Particle> particleBuffer;
RWStructuredBuffer<float3> positionBuffer;
RWStructuredBuffer<Cell> cellBuffer;
RWStructuredBuffer<uint> cellIDs;
RWStructuredBuffer<uint> particleIDs;
RWStructuredBuffer<uint> keys;
RWStructuredBuffer<uint2> startendIDs;
RWStructuredBuffer<float4> debugBuffer;

Texture2D NoiseTexture;
SamplerState samplerNoiseTexture;



[numthreads(128,1,1)]
void ParticleUpdate (uint3 id : SV_DispatchThreadID)
{
    Particle particle = particleBuffer[id.x];

    float3 summed_velocity = float3(0,0,0);
    // Loop through every other particle in the simulation
    for (int i=0; i<particle_count; i++)
    {
        Particle neighbour = particleBuffer[i];

        float distance = length(neighbour.position.xyz - particle.position.xyz);
        if (distance < radius)
        {
            summed_velocity += neighbour.velocity.xyz;
        }
    }
    float3 new_velocity = normalize(summed_velocity) * speed;

    // particle.velocity.xyz = float3(0,1,0);
    particle.velocity.xyz = new_velocity;
    particle.position.xyz += particle.velocity.xyz*dt;
    particle.position.w = particleSize;

    BoundToBox(particle.position.xyz);
    particleBuffer[id.x] = particle;
}



[numthreads(128,1,1)]
void OptimizedParticleUpdate (uint3 id : SV_DispatchThreadID)
{
    uint p_id = particleIDs[id.x];
    Particle particle = particleBuffer[p_id];
    int3 cell_pos = CalcCellCoords(particle.position.xyz);
    uint cell_id = CalcCellId(cell_pos);


    ////////// ------ CHECK NEIGHBOUR VELOCITIES ------ ////////// 
    
    float3 summed_velocity = particle.velocity.xyz;
    // Loop through neighbouring cells
    for (int x = -1; x <= 1; x++){
        for (int y = -1; y <= 1; y++){
            for (int z = -1; z <= 1; z++){
                // Compute neighbour cell coordinates
                int3 neighbouring_cell_pos = cell_pos + int3(x, y, z);
                neighbouring_cell_pos = int3(
                    (neighbouring_cell_pos.x + grid_dims.x) % grid_dims.x,
                    (neighbouring_cell_pos.y + grid_dims.y) % grid_dims.y,
                    (neighbouring_cell_pos.z + grid_dims.z) % grid_dims.z
                );
                // Compute neighbour cell id from cell coordinates
                uint neighbour_cell_id = CalcCellId(neighbouring_cell_pos);
                // Check if neighbour cell is empty
                if (cellBuffer[neighbour_cell_id].is_full == 1)
                {
                    uint start_id = startendIDs[neighbour_cell_id].x;
                    uint end_id = startendIDs[neighbour_cell_id].y;
                    if (end_id >= start_id)
                    {
                        // Loop through particles in neighbouring cell
                        for (uint i = start_id; i <= end_id; i++)
                        {
                            uint neighbour_id = particleIDs[i];
                            Particle neighbour = particleBuffer[neighbour_id];
                            float distance = length(neighbour.position.xyz - particle.position.xyz);
                            if (distance < radius)
                                summed_velocity += neighbour.velocity.xyz;
                        }
                    }
                }
            }
        }
    }
    // Average neighbour direction is the normalized sum of neighbour velocities
    float3 average_direction = normalize(summed_velocity);

    
    ////////// ------ RANDOM NUMBER GENERATION ------ //////////

    // Use time as seed for random float generator
    uint time_seed_1 = (uint)((time * 877) % particle_count);
    uint time_seed_2 = (uint)((time * 349) % particle_count);
    state = id.x ^ time_seed_1;
    if (state == 0) state = time_seed_2;
    float random_num_1 = rand() % 123456 / 123456.0;
    float random_num_2 = rand() % 654321 / 654321.0;
    float random_num_3 = rand() % 456123 / 456123.0;
    
    
    ////////// ------ RODRIGUES VECTOR ROTATION ------ //////////

    // float theta_perturbation = (random_num_1 - 0.5)*2 * PI * noise;
    float theta_perturbation = acos(1 - 2*random_num_1 * noise);
    float phi_perturbation = random_num_2 * 2 * PI;
    
    float3 random_vector = float3((random_num_1 - 0.5)*2, (random_num_2 - 0.5)*2, (random_num_3 - 0.5)*2);
    float3 other_vector = normalize(float3(average_direction.z, 0.0, average_direction.x));


    float3 normal_vector = normalize(cross(average_direction, other_vector));
    // Theta rotation of vector
    float3 first_rot = average_direction * cos(theta_perturbation) + cross(normal_vector, average_direction) * sin(theta_perturbation);
    // Phi rotation of vector
    float3 second_rot = first_rot * cos(phi_perturbation) + cross(average_direction, first_rot) * sin(phi_perturbation) + average_direction * dot(first_rot, average_direction) * (1-cos(phi_perturbation));
    // Result of second rotation is the perturbed velocity
    float3 new_velocity = second_rot;
    // float3 new_velocity = average_direction;


    ////////// ------ UPDATE PARTICLE POSITION AND VELOCITY ------ //////////

    particle.velocity.xyz = new_velocity * speed;
    particle.position.xyz += particle.velocity.xyz*dt;    
    // Enforce Periodic Boundaries
    BoundToBox(particle.position.xyz);
    // Update particle in buffer
    particleBuffer[p_id] = particle;
    // Update particle size;
    particleBuffer[p_id].position.w = particleSize;


    ////////// ------ UPDATE GRID ------ //////////

    cell_pos = CalcCellCoords(particle.position.xyz);
    cell_id = CalcCellId(cell_pos);
    cellIDs[p_id] = cell_id;
    // Reset cell buffer
    cellBuffer[cell_id].is_full = 0;
    
    
    ////////// ------ DEBUG BUFFER ------ //////////

    debugBuffer[id.x].xy = float2(theta_perturbation, random_num_2);
}



[numthreads(128,1,1)]
void RearrangeParticleIDs (uint3 id : SV_DispatchThreadID)
{
    particleIDs[id.x] = keys[id.x];
    keys[id.x] = id.x;
}



[numthreads(128,1,1)]
void BuildStartEndIDs (uint3 id : SV_DispatchThreadID)
{
    uint i = id.x;
    uint p_id = particleIDs[i];
    uint cell_id = cellIDs[p_id];
    uint prev_cell_id = (i != 0) ? cellIDs[particleIDs[i-1]] : cellIDs[particleIDs[(uint)particle_count-1]];
    uint next_cell_id = (i != (uint)particle_count-1) ? cellIDs[particleIDs[i+1]] : cellIDs[particleIDs[0]];

    if (cell_id != prev_cell_id)
        startendIDs[cell_id].x = i;
    if (cell_id != next_cell_id)
        startendIDs[cell_id].y = i;

    // Specify which cells have particles
    cellBuffer[cell_id].is_full = 1;
}