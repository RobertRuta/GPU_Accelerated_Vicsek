#pragma kernel DistributeOnSphere
#include <"../../../ComputeShaders/noise_utility.cginc">
#include <"../../../ComputeShaders/simulation_variables.cginc">


RWStructuredBuffer<float3> positionBuffer;

Texture2D NoiseTexture;
SamplerState samplerNoiseTexture;


[numthreads(128,1,1)]
void DistributeOnSphere (uint3 id : SV_DispatchThreadID)
{
    // TODO: insert actual code here!
    float3 position = positionBuffer[id.x];

    uint time_seed_1 = (uint)((time * 877) % particle_count);
    uint time_seed_2 = (uint)((time * 349) % particle_count);
    float2 uvx = float2(rand_float(id.x + time_seed_1), rand_float(id.x + time_seed_2));
    // float4 rand_vector = (NoiseTexture.SampleLevel(samplerNoiseTexture, uvx, 0.0f) - 0.5) * 2;
    float4 rand_vector = NoiseTexture.SampleLevel(samplerNoiseTexture, uvx, 0.0f);
    
    float theta = rand_vector.x * PI;
    float phi = rand_vector.y * 2 * PI;
    float x = radius * cos(phi) *sin(theta);
    float z = radius * sin(phi)*sin(theta);
    float y = radius * cos(theta);

    // positionBuffer[id.x] = normalize(rand_vector.xyz) * radius;
    // positionBuffer[id.x] = float3(theta,phi,theta);
    positionBuffer[id.x] = float3(x,y,z);
}