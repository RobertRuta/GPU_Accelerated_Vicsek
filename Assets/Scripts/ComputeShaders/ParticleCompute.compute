// Each #kernel tells which function to compile; you can have many kernels

#pragma kernel ParticleUpdate
#pragma kernel OptimizedParticleUpdate
#pragma kernel RearrangeParticleIDs
#pragma kernel BuildStartEndIDs
#pragma kernel ResetCellBuffer
#pragma kernel CopyParticleBuffer

#include "noise_utility.cginc"
#include "xorshiro.cginc"
#include "grid_utility.cginc"


struct Particle
{
    float4 position;
    float4 velocity;
};

struct Cell
{
    int count;
};


RWStructuredBuffer<Particle> particleBuffer;
RWStructuredBuffer<Particle> particleInBuffer;
RWStructuredBuffer<Cell> cellBuffer;
RWStructuredBuffer<uint> cellIDs;
RWStructuredBuffer<uint> particleIDs;
RWStructuredBuffer<uint> keys;
RWStructuredBuffer<uint2> startendIDs;
RWStructuredBuffer<float4> debugBuffer1;
RWStructuredBuffer<float4> debugBuffer2;
RWStructuredBuffer<float4> debugBuffer3;


[numthreads(128,1,1)]
void ParticleUpdate (uint3 id : SV_DispatchThreadID)
{
    uint p_id = id.x;
    Particle particle = particleInBuffer[p_id];


    ////////// ------ SUM NEIGHBOUR VELOCITIES ------ ////////// 

    float3 summed_velocity = float3(0,0,0);
    int neighbour_count = 0;
    // Loop through every other particle in the simulation
    for (int i=0; i<particle_count; i++)
    {
        Particle neighbour = particleInBuffer[i];

        float distance = length(neighbour.position.xyz - particle.position.xyz);
        if (distance < radius)
        {
            summed_velocity += neighbour.velocity.xyz;
            neighbour_count += 1;
        }
    }
    float3 average_direction = normalize(summed_velocity);


    ////////// ------ RANDOM NUMBER GENERATION ------ //////////

    uint time_seed = (uint)(time*1000);
    uint time_seed_2 = MurmurHash3(time_seed);
    uint particle_seed = MurmurHash3(p_id+1);
    uint particle_seed2 = MurmurHash3(particle_seed);
    uint time_particle_seed = MurmurHash3(particle_seed + time_seed_2);
    uint time_particle_seed2 = MurmurHash3(particle_seed2 + time_seed);
    

    ////////// ------ VELOCITY PERTURBATION ------ //////////

    float3 random_vector = hash(uint3(time_seed_2, particle_seed, time_particle_seed));
    float3 other_vector = GetOtherVector(average_direction);
    float3 normal_vector = cross(other_vector, average_direction);
    float phi = (float)time_particle_seed2 / (float)0xffffffff * PI * 2; // Random angle
    float theta = ((float)time_particle_seed / (float)0xffffffff - 0.5) * PI * noise; // Random angle
    
    float3 new_direction = RodriguezRot(average_direction, normal_vector, theta);
    new_direction = RodriguezRot(new_direction, average_direction, phi);
    new_direction = new_direction;

    
    ////////// ------ UPDATE PARTICLE POSITION AND VELOCITY ------ //////////
    
    float3 new_velocity = new_direction * speed;
    float3 new_position = particle.position.xyz + new_velocity*dt;

    // Enforce Periodic Boundaries
    BoundToBox(new_position);

    // Update particle in buffer
    particleBuffer[p_id].position = float4(new_position, (float)neighbour_count);
    particleBuffer[p_id].velocity = float4(new_velocity, particleSize);
}



[numthreads(128,1,1)]
void OptimizedParticleUpdate (uint3 id : SV_DispatchThreadID)
{
    // getting particle index
    uint p_id = particleIDs[id.x];

    Particle particle = particleInBuffer[p_id];
    int3 cell_pos = CalcCellCoords(particle.position.xyz);
    uint cell_id = CalcCellId(cell_pos);


    ////////// ------ SUM NEIGHBOUR VELOCITIES ------ ////////// 
    
    float3 summed_velocity = particle.velocity.xyz;
    int neighbour_count = 0;
    // Loop through neighbouring cells
    for (int x = -1; x <= 1; x++) {
        for (int y = -1; y <= 1; y++) {
            for (int z = -1; z <= 1; z++) {
                // Compute neighbour cell coordinates
                int3 neighbouring_cell_pos = cell_pos + int3(x, y, z);
                neighbouring_cell_pos = int3(
                    (neighbouring_cell_pos.x + grid_dims.x) % grid_dims.x,
                    (neighbouring_cell_pos.y + grid_dims.y) % grid_dims.y,
                    (neighbouring_cell_pos.z + grid_dims.z) % grid_dims.z
                );
                // Compute neighbour cell id from cell coordinates
                uint neighbour_cell_id = CalcCellId(neighbouring_cell_pos);
                // If neighbour cell is not empty
                if (cellBuffer[neighbour_cell_id].count > 0)
                {
                    uint start_id = startendIDs[neighbour_cell_id].x;
                    uint end_id = startendIDs[neighbour_cell_id].y;
                    if (end_id > start_id) {
                        // Loop through particles in neighbouring cell
                        for (uint i = start_id; i <= end_id; i++) {
                            uint neighbour_id = particleIDs[i];
                            Particle neighbour = particleInBuffer[neighbour_id];
                            float distance = length(neighbour.position.xyz - particle.position.xyz);
                            if (distance < radius)
                            {
                                summed_velocity += neighbour.velocity.xyz;
                                neighbour_count++;
                            }
                        }
                    }
                }
            }
        }
    }

    // Average neighbour direction is the normalized sum of neighbour velocities
    float3 average_direction = normalize(summed_velocity);

    
    ////////// ------ RANDOM NUMBER GENERATION ------ //////////

    uint time_seed = (uint)(time*1000);
    uint time_seed_2 = MurmurHash3(time_seed);
    uint particle_seed = MurmurHash3(p_id+1);
    uint particle_seed2 = MurmurHash3(particle_seed);
    uint time_particle_seed = MurmurHash3(particle_seed + time_seed_2);
    uint time_particle_seed2 = MurmurHash3(particle_seed2 + time_seed);
    uint cell_seed = rotl(time_seed, cell_id);
    

    ////////// ------ VELOCITY PERTURBATION ------ //////////

    float3 random_vector = hash(uint3(time_seed_2, particle_seed, cell_seed));
    float3 other_vector = GetOtherVector(average_direction);
    float3 normal_vector = cross(other_vector, average_direction);
    float phi = (float)time_particle_seed2 / (float)0xffffffff * PI * 2; // Random angle
    float theta = (float)time_particle_seed / (float)0xffffffff * PI * noise; // Random angle

    float3 new_direction = RodriguezRot(average_direction, normal_vector, theta);
    new_direction = RodriguezRot(new_direction, average_direction, phi);


    ////////// ------ UPDATE PARTICLE POSITION AND VELOCITY ------ //////////

    float3 new_velocity = new_direction * speed;
    float3 new_position = particle.position.xyz + new_velocity*dt;

    // Enforce Periodic Boundaries
    BoundToBox(new_position);

    // Update particle in buffer
    particleBuffer[p_id].position = float4(new_position, (float)neighbour_count);
    particleBuffer[p_id].velocity = float4(new_velocity, particleSize);


    ////////// ------ UPDATE GRID ------ //////////

    cell_pos = CalcCellCoords(particle.position.xyz);
    cell_id = CalcCellId(cell_pos);
    cellIDs[p_id] = cell_id;

    
    ////////// ------ DEBUG BUFFER ------ //////////

    debugBuffer1[id.x] = float4(1,1,1,1);
    debugBuffer2[id.x] = float4(average_direction, noise);
}



[numthreads(128,1,1)]
void RearrangeParticleIDs (uint3 id : SV_DispatchThreadID)
{
    particleIDs[id.x] = keys[id.x];
    keys[id.x] = id.x;
}



[numthreads(128,1,1)]
void BuildStartEndIDs (uint3 id : SV_DispatchThreadID)
{
    uint i = id.x;
    uint p_id = particleIDs[i];
    uint cell_id = cellIDs[p_id];
    uint prev_cell_id = (i != 0) ? cellIDs[particleIDs[i-1]] : cellIDs[particleIDs[(uint)particle_count-1]];
    uint next_cell_id = (i != (uint)particle_count-1) ? cellIDs[particleIDs[i+1]] : cellIDs[particleIDs[0]];
    
    // For some reason this breaks for the cell with p_id == 0 ...
    if (p_id != 0) {
        if (cell_id != prev_cell_id)
            startendIDs[cell_id].x = i;
        if (cell_id != next_cell_id)
            startendIDs[cell_id].y = i;

        // Specify which cells have particles
        cellBuffer[cell_id].count++;
    }
    // ... this is why this else statement is necessary
    else {
        startendIDs[cell_id].x = startendIDs[cell_id - 1].y + 1;
        if (cell_id != next_cell_id)
            startendIDs[cell_id].y = i;
    }
}



[numthreads(128,1,1)]
void ResetCellBuffer (uint3 id : SV_DispatchThreadID)
{
    cellBuffer[id.x].count = 0;
}



[numthreads(128,1,1)]
void CopyParticleBuffer (uint3 id : SV_DispatchThreadID)
{
    particleInBuffer[id.x] = particleBuffer[id.x];
}