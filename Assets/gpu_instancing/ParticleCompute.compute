// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel ParticleUpdate

struct Particle
{
    float4 position;
    float4 velocity;
};

RWStructuredBuffer<Particle> particleBuffer;

float dt;
int particle_count;
float radius;
float speed;
float3 box;

// void BoundToBox(inout float3 pos, float3 box_dims, float3 box_origin)
// {
//     float3 boxpos = box_dims / 2 + box_origin;
//     if (abs(pos.x) > boxpos.x)
//         -abs(pos.x - box_origin.x) / (pos.x - box_origin.x) * (pos.x - boxpos.x);
//     if (abs(pos.y) > boxpos.y)
//         -abs(pos.y - box_origin.y) / (pos.y - box_origin.y) * (pos.y - boxpos.y);
//     if (abs(pos.x) > boxpos.x)
//         -(pos.z - box_origin.z) / abs(pos.z - box_origin.z) * (pos.z - boxpos.z);


//     if 
// }

void BoundToBox(inout float3 pos)
{
    [branch] if(pos.x > box.x)
    {
       pos.x -= box.x;
    }
    [branch] if(pos.x < 0.0)
    {
        pos.x += box.x;
    }
    [branch] if(pos.y > box.y)
    {
        pos.y -= box.y;
    }
    [branch] if(pos.y < 0.0)
    {
        pos.y += box.y;
    }
    [branch] if(pos.z > box.z)
    {
        pos.z -= box.z;
    }
    [branch] if(pos.z < 0.0)
    {
        pos.z += box.z;
    }

    // return pos;
}


[numthreads(128,1,1)]
void ParticleUpdate (uint3 id : SV_DispatchThreadID)
{
    // TODO: insert actual code here!
    Particle particle = particleBuffer[id.x];

    float3 summed_velocity = float3(0,0,0);
    // Loop through every other particle in the simulation
    for (int i=0; i<particle_count; i++)
    {
        Particle neighbour = particleBuffer[i];

        float distance = length(neighbour.position.xyz - particle.position.xyz);
        if (distance < radius)
        {
            summed_velocity += neighbour.velocity;
        }
    }
    float3 new_velocity = normalize(summed_velocity) * speed;

    // particle.velocity.xyz = float3(0,1,0);
    particle.velocity.xyz = new_velocity;
    particle.position.xyz += particle.velocity.xyz*dt;

    BoundToBox(particle.position.xyz);
    particleBuffer[id.x] = particle;
}
